/*
Реализовать паттерн «строитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
https://en.wikipedia.org/wiki/Builder_pattern

Тип:		Порождающий
Уровень: 	Объектный

Паттерн "Строитель" (Builder) является порождающим паттерном проектирования, который позволяет создавать
сложные объекты шаг за шагом. Он позволяет отделить процесс создания объекта от его представления,
что позволяет получить разные представления одного и того же объекта.

Кока-Кола производит сложный продукт, состоящий из 4 частей (крышка, бутылка, этикетка, напиток),
которые должны быть применены в нужном порядке. Нельзя вначале взять крышку, бутылку, завинтить крышку,
а потом пытаться налить туда напиток. Для реализации объекта, бутылки Кока-Колы, которая поставляется клиенту,
нам нужен паттерн Builder.

Требуется для реализации:
1. Базовый абстрактный класс Builder, который описывает интерфейс строителя, те команды, которые он обязан выполнять;
2. Класс Director, который будет распоряжаться строителем и отдавать ему команды в нужном порядке,
	а строитель будет их выполнять;
3. Класс сложного объекта Product.
4. Класс ConcreteBuilder, который реализует интерфейс строителя и взаимодействует со сложным объектом;

Применение паттерна "Строитель" полезно в следующих случаях:
1. Когда требуется создание сложных объектов с различными вариациями и конфигурациями.
2. Когда необходимо избежать загрязнения конструктора множеством параметров.
3. Когда нужно обеспечить последовательное создание и настройку объектов.
4. Когда требуется создание объектов с различными представлениями.

Плюсы:
- Упрощение процесса создания сложных объектов.
- Разделение процесса конструирования и представления объекта.
- Позволяет создавать различные представления одного и того же объекта.

Минусы:
- Увеличение количества классов и сложности кода.
- Возможное увеличение времени разработки из-за необходимости создания дополнительных классов.

Примеры использования:
1. Построение графических интерфейсов:
В графических библиотеках, таких как Qt или Swing, паттерн "Строитель" может использоваться для создания сложных
пользовательских интерфейсов, где каждый компонент может иметь различные свойства и настройки.
2. Конструирование объектов баз данных:
В ORM (Object-Relational Mapping) системах, паттерн "Строитель" может быть использован для создания запросов к
базе данных, где каждый компонент запроса может быть добавлен поэтапно.

*/

package pattern

import "fmt"

// Базовый абстрактный класс Builder, который описывает интерфейс строителя, те команды, которые он обязан выполнять;
type Builder interface {
	PourTheFoundation()     // залить фундамент
	BuildUpTheWalls()       // возвести стены
	PutUpRoof()             // поставить крышу
	InsertWindowsAndDoors() // вставить окна и двери
}

// Класс Director, который будет распоряжаться строителем и отдавать ему команды в нужном порядке
type Director struct {
	builder Builder
}

func NewDirector(builder Builder) *Director {
	return &Director{builder: builder}
}

func (d *Director) Construct() {
	d.builder.PourTheFoundation()
	d.builder.BuildUpTheWalls()
	d.builder.PutUpRoof()
	d.builder.InsertWindowsAndDoors()
}

// Класс сложного объекта Product.
type Product struct {
	house string
}

func NewProduct(house string) *Product {
	return &Product{house: house}
}

// Класс ConcreteBuilder, который реализует интерфейс строителя и взаимодействует со сложным объектом;
type ConcreteBuilder struct {
	product Product
}

func NewConcreteBuilder(product Product) *ConcreteBuilder {
	return &ConcreteBuilder{product: product}
}

func (cb *ConcreteBuilder) PourTheFoundation() {
	fmt.Println("Pour The Foundation - done!")
}

func (cb *ConcreteBuilder) BuildUpTheWalls() {
	fmt.Println("Build Up The Walls - done!")
}

func (cb *ConcreteBuilder) PutUpRoof() {
	fmt.Println("Put Up Roof - done!")
}

func (cb *ConcreteBuilder) InsertWindowsAndDoors() {
	fmt.Println("Insert Windows And Doors - done!")
}

func RunBuilder() {
	product := NewProduct("White House")
	concreteBuilder := NewConcreteBuilder(*product)
	director := NewDirector(concreteBuilder)

	director.Construct()
}
